{"version":3,"file":"validator-manager.js","sourceRoot":"","sources":["../../../../src/components/validators/validator-manager.ts"],"names":[],"mappings":";;;IAGA;QACE,0BAAoB,UAIlB;YAJkB,eAAU,GAAV,UAAU,CAI5B;QACF,CAAC;QAEM,kCAAO,GAAd;YACE,KAAmB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,EAAC;gBAA/B,IAAI,OAAO,SAAA;gBAEb,KAAgB,UAAa,EAAb,KAAA,OAAO,CAAC,KAAK,EAAb,cAAa,EAAb,IAAa,EAAC;oBAA1B,IAAI,IAAI,SAAA;oBACV,IAAM,KAAK,GAAG,WAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBAC5D,IAAM,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC;oBAEpC,IAAG,CAAC,OAAO,EAAC;wBACV,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;wBAAC,OAAO,KAAK,CAAC;qBAC7C;iBAEF;aAEF;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QACH,uBAAC;IAAD,CAAC,AAzBD,IAyBC","sourcesContent":["import ValidatorRuleCallable from \"./validator-rule-callable\";\r\nimport { Form } from \"../form\";\r\n\r\nexport default class ValidatorManager {\r\n  constructor(private chainRules:Array<{\r\n    selectorField:string,  // seletor testado\r\n    rules:Array<ValidatorRuleCallable>, // array de validators a ser verificado. Cada Posicao do array tem um callable(string)\r\n    messageInvalid:string // mensagem de erro caso isValid falhe\r\n  }>){\r\n  }\r\n\r\n  public isValid():boolean{\r\n    for(let ruleSet of this.chainRules){\r\n      \r\n      for(let rule of ruleSet.rules){\r\n        const value = Form.getValueFromField(ruleSet.selectorField);\r\n        const isValid:boolean = rule(value);\r\n\r\n        if(!isValid){\r\n          alert(ruleSet.messageInvalid); return false;\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return true;\r\n  }\r\n}"]}