{"version":3,"file":"post-new-page.js","sourceRoot":"","sources":["../../../src/page/post-new-page.ts"],"names":[],"mappings":";;;IAMA;QAIE,qBAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;YAF9B,cAAS,GAAW,KAAK,CAAC;YAGhC,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;QAED,0BAAI,GAAJ;YAAA,iBAOC;YALC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC;iBAC/B,gBAAgB,CAAC,QAAQ,EAAE,UAAC,KAAW;gBACtC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,4BAAM,GAAd;YAAA,iBAYC;YAVC,IAAG,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC;gBACjB,OAAO;aACR;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE,WAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;gBACpC,SAAS,EAAE,WAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;aAC/C,CAAC,CAAC,IAAI,CAAE,cAAI,OAAA,KAAI,CAAC,QAAQ,EAAE,EAAf,CAAe,CAAE,CAAC,kCAAkC;iBAC9D,KAAK,CAAE,UAAC,cAAuB,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA,CAAA,CAAC,CAAC,CAAC;QAExE,CAAC;QAEO,6BAAO,GAAf;YACE,IAAM,gBAAgB,GAAoB,IAAI,2BAAgB,CAAC;gBAC7D,EAAC,aAAa,EAAC,MAAM,EAAC,KAAK,EAAE,CAAE,oBAAU,CAAC,QAAQ,CAAE,EAAE,cAAc,EAAE,0BAA0B,EAAC;gBACjG,EAAC,aAAa,EAAC,WAAW,EAAC,KAAK,EAAE,CAAE,oBAAU,CAAC,QAAQ,CAAE,EAAE,cAAc,EAAE,+BAA+B,EAAC;aAC5G,CAAC,CAAC;YAEH,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC;QACpC,CAAC;QAEO,8BAAQ,GAAhB;YACE,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,sBAAsB,CAAC;QAChD,CAAC;QAEH,kBAAC;IAAD,CAAC,AA5CD,IA4CC;IA5CY,kCAAW;IA8CxB,yBAAyB;IACzB,IAAI;QACF,IAAI,eAAe,GAAG,IAAI,mBAAQ,EAAE,CAAC;QACrC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC;KAClC;IAAC,OAAO,CAAC,EAAC;QACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB","sourcesContent":["import { Page } from \"./page\";\r\nimport PostHttp from \"../http/post-http\";\r\nimport { Form } from \"../components/form\";\r\nimport ValidatorManager from '../components/validators/validator-manager';\r\nimport Validators  from '../components/validators/validators';\r\n\r\nexport class PostNewPage implements Page {\r\n\r\n  private formValid:boolean = false;\r\n\r\n  constructor(private postHttp: PostHttp){\r\n    this.init();\r\n  }\r\n  \r\n  init(): void{\r\n\r\n    document.getElementById('my-form')\r\n      .addEventListener('submit', (event:Event)=>{\r\n        event.preventDefault();\r\n        this.submit();\r\n      });\r\n  }\r\n\r\n  private submit():void{\r\n\r\n    if(!this.isValid()){\r\n      return;\r\n    }\r\n\r\n    this.postHttp.save({\r\n        nome: Form.getValueFromField('nome'),\r\n        descricao: Form.getValueFromField('descricao')\r\n      }).then( ()=>this.goToList() ) // apos salvar mostrar na listagem\r\n        .catch( (rejectResponse:Response)=>{console.log(rejectResponse)});\r\n\r\n  }\r\n\r\n  private isValid():boolean{\r\n    const validatorManager:ValidatorManager = new ValidatorManager([\r\n      {selectorField:'nome',rules: [ Validators.required ], messageInvalid: 'Campo nome é obrigatório'},\r\n      {selectorField:'descricao',rules: [ Validators.required ], messageInvalid: 'Campo descrição é obrigatório'}\r\n    ]);\r\n    \r\n    return validatorManager.isValid();\r\n  }\r\n\r\n  private goToList():void{\r\n    window.location.href = '/post/post-list.html';\r\n  }\r\n\r\n}\r\n\r\n// bootstrap app new post\r\ntry {\r\n  let postHttpService = new PostHttp();\r\n  new PostNewPage(postHttpService);\r\n} catch (e){\r\n  console.log(e);\r\n}\r\n"]}