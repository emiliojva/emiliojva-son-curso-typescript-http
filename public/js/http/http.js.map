{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/http/http.ts"],"names":[],"mappings":";;;IAEA,IAAK,SAGJ;IAHD,WAAK,SAAS;QACZ,wBAAa,CAAA;QACb,0BAAc,CAAA;IAChB,CAAC,EAHI,SAAS,KAAT,SAAS,QAGb;IAAA,CAAC;IAEF;QAAA;QA0FA,CAAC;QAxFC;;;WAGG;QACH,kBAAG,GAAH,UAAI,QAAe;YACjB,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC;QAED;;;WAGG;QACH,mBAAI,GAAJ,UAAK,QAAe,EAAE,IAAW;YAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAC,SAAS,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;QAC3D,CAAC;QAED;;;;;WAKG;QACK,6BAAc,GAAtB,UAAuB,QAAe,EAAC,IAAoB,EAAE,IAAgB;YAA7E,iBASC;YATsC,qBAAA,EAAA,OAAO,SAAS,CAAC,GAAG;YAAE,qBAAA,EAAA,SAAgB;YAC3E,OAAO,IAAI,OAAO,CAAE,UAAE,OAAO,EAAC,MAAM;gBAClC,IAAI,KAAK,GAAkB,KAAI,CAAC,WAAW,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC;gBAC3D,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAC,OAAO,EAAC,MAAM,CAAC,CAAC;gBAC9C,qCAAqC;gBACrC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBAC3D,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB;YAEtD,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;;WAIG;QACK,0BAAW,GAAnB,UAAoB,IAAe,EAAE,QAAe,EAAE,KAAkB;YAAlB,sBAAA,EAAA,YAAkB;YAEtE,IAAM,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC,CAAC,oDAAoD;YACxF,KAAK,CAAC,IAAI,CAAE,IAAI,EAAG,QAAQ,EAAG,KAAK,CAAC,CAAC;YACrC,OAAO,KAAK,CAAC;QACf,CAAC;QAED;;;;;WAKG;QACK,iCAAkB,GAA1B,UAA2B,KAAqB,EAAE,OAAO,EAAE,MAAM;YAC7D;;;;aAIC;YACH,KAAK,CAAC,kBAAkB,GAAG,UAAS,KAAW;gBAC7C,sBAAsB;gBACtB,IAAG,IAAI,CAAC,UAAU,IAAI,CAAC,EAAC,EAAE,sBAAsB;oBAC9C,qDAAqD;oBACrD,IAAM,QAAQ,GAAY,IAAI,mBAAQ,CAAC,KAAK,CAAC,YAAY,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAExE;;;uBAGG;oBACH,IAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC,EAAE,oCAAoC;wBAC/E,OAAO,CAAC,QAAQ,CAAC,CAAC;qBACnB;yBAAM;wBAEL;;;2BAGG;wBACH,IAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC;4BACpF,MAAM,CAAC,QAAQ,CAAC,CAAC;yBAClB;qBAEF;iBAGF;YAEH,CAAC,CAAC;QAEJ,CAAC;QAEH,WAAC;IAAD,CAAC,AA1FD,IA0FC","sourcesContent":["import { Response } from \"./response\";\r\n\r\nenum httpVerbs  {\r\n  GET   = 'GET',\r\n  POST  = 'POST'\r\n};\r\n\r\nexport default class Http {\r\n\r\n  /**\r\n   * Cria uma requisicao ajax com GET method\r\n   * @param endpoint \r\n   */\r\n  get(endpoint:string): Promise<Response>{\r\n    return this.requestPromise(endpoint);\r\n  }\r\n\r\n  /**\r\n   * Cria uma requisicao ajax com POST method\r\n   * @param endpoint \r\n   */\r\n  post(endpoint:string, data:object): Promise<Response>{\r\n    return this.requestPromise(endpoint,httpVerbs.POST,data);\r\n  }\r\n\r\n  /**\r\n   * Retorna uma Promise contendo um Objecto XMLHttpRequest configurado\r\n   * Define os callbacks de acordo com status da requisição(200,400,500) e o readyState 2,3,4\r\n   * @param endpoint \r\n   * @param verb \r\n   */\r\n  private requestPromise(endpoint:string,verb = httpVerbs.GET, data:object = {}): Promise<Response>{\r\n    return new Promise( ( resolve,reject )=>{\r\n      let xhttp:XMLHttpRequest = this.createXhttp(verb,endpoint);\r\n      this.configureCallbacks(xhttp,resolve,reject);\r\n      // console.log(JSON.stringify(data));\r\n      xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhttp.send(JSON.stringify(data)); // no data to send\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cria uma requisicao ajax\r\n   * @param verb \r\n   * @param endpoint \r\n   */\r\n  private createXhttp(verb: httpVerbs, endpoint:string, async:boolean=true)\r\n  {\r\n    const xhttp = new XMLHttpRequest(); // objeto representando requisicoes assicronas(ajax)\r\n    xhttp.open( verb , endpoint , async);\r\n    return xhttp;\r\n  }\r\n\r\n  /**\r\n   * Configura os manipuladores de retorno de sucesso ou falha operantes no objeto XMLHttpRequest\r\n   * @param xhttp \r\n   * @param resolve \r\n   * @param reject \r\n   */\r\n  private configureCallbacks(xhttp: XMLHttpRequest, resolve, reject){\r\n      /**\r\n     * Para pegar a reservada this do contexto do evento é necessario usar a notação com function(){}\r\n     * Usando a notação (event):any=>{} não possui acesso ao this do evento e sim da Classe\r\n     * ref: https://pt.stackoverflow.com/questions/143399/qual-a-diferen%C3%A7a-entre-function-e-por-que-n%C3%A3o-funciona-o-http-ge\r\n     */\r\n    xhttp.onreadystatechange = function(event:Event):void {\r\n      // console.log(event);\r\n      if(this.readyState == 4){ // status OK do client\r\n        // pegando a resposta do server como um tipo Response\r\n        const response:Response = new Response(xhttp.responseText,xhttp.status);\r\n\r\n        /**\r\n         * OK, Created...\r\n         * status 200,201...\r\n         */\r\n        if(this.status.toString().startsWith('20')){ // String.startWith from ES6(ES2005)\r\n          resolve(response);\r\n        } else {\r\n\r\n          /**\r\n           * NotFound, ServerError...\r\n           * status 400,500...\r\n           */\r\n          if(this.status.toString().startsWith('40') || this.status.toString().startsWith('50')){\r\n            reject(response);\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n      \r\n    };\r\n\r\n  }\r\n\r\n}"]}